JIT编译参数 -XX:CompileThreshold=1500 -XX:+PrintCompilation -XX:+CITime
预留对象在新生代 -XX:+PrintGCDetails -Xmx20M -Xms20M -Xmn10M -XX:SurvivorRatio=2 如果SurvivorRatio改大，s0s1的内存就会变小
堆快照信息导出 -XX:+PrintGCDetails -Xmx10M -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=D:/m.hprof
栈-运行，堆-存储

线程栈 线程私有
	-Xss 设置每个线程的堆栈大小。更具应用的线程所需内存大小进行调整。在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，Linux 下最大1024，可以设置 经验值在3000~5000左右。
Heap堆 线程共享
	新生代	Eden	s0	s1
	老年代
		Xms 默认机器的64分之一	Xmx 默认最大机器的四分之一 Xss 默认1024kb
	-Xms 设置堆的最小/初始值，大点程序启动会快，但可能也会因为堆内存过大导致垃圾收集时间过长。堆内存越大，越不容易Full 		GC，越小，垃圾回收越频繁增加垃圾回收总时间，减低吞吐量
	-Xmx 设置堆的最大值。最大可占用的内存大小。超出了这个值，会抛出OutOfMemory异常。
	-Xmn 设置新生代的大小
	-XX:NewRatio=4 设置老年代和新生代的比例 
	-XX:SurvivorRatio=5 新生代中的eden与survivior区的比例 5:1:1 默认8 :1:1
	-XX:TargetSurvivorRatio 设置survivior区的可使用率，达到此值，被送到老年代
	-XX:MaxTenuringThreshold=0：设置垃圾最大年龄。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。
	———— 默认以Byte为单位，可以添加k/K、m/M表示KB或MB

方法区/元空间 也称持久代
	-XX:MaxPermSize 设置最大持久区大小
	-XX:PermSize 设置 最小/初始 持久区的大小
	-XX:MaxMetaSpaceSize
	持久代的大小直接决定了系统可以支持多少个类定义和多少常量。
	对于使用 CGLIB 或者 Javassit 等动态字节码生成工具的应用程序而言，设置合理的持久代大小有助于维持系统稳定
	系统所支持的最大类与 MaxPermSize 成正比。一般来说，MaxPermSize 设置为 64MB 已经可以满足绝大部分应用程序正常工作。如果依然出现永久区溢出，可以设置为 128MB。这是两个很常用的永久区取值。如果 128MB 依然不能满足应用程序需求，那么对于大部分应用程序来说，则应该考虑优化系统的设计，减少动态类的产生，或者利用 GC 回收部分驻扎在永久区的无用类信息，以使系统健康运行。

垃圾回收算法
	引用计数法无法处理循环引用的问题，不适合JVM的垃圾回收

	标记清除算法——容易产生内存碎片，对大对象的内存分配，由于内存碎片的存在，降低分配效率
	复制算法——内存折半，适合新生代，垃圾多，存活少
	标记-压缩	 既不内存折半，也不产生内存碎片，适合老年代的垃圾回收
	增量算法 让垃圾回收线程和用户线程能交替执行，其他算法都会stop the world
	分代 如新生代，采用复制算法，老年代采用 标记压缩算法
垃圾回收器

	Serial 新生代串行收集器，单线程，独占式的垃圾回收 JVM-client模式下(机器内存2G默认是)，默认的垃圾回收器
	-XX:+UseSerialGC 指定新生代串行收集器和老年代串行收集器

	Serial old老年代串行收集器，作为CMS回收器的备用回收器 
	-XX:+UseSerialGC 新生代老年代都指定串行收集器
	-XX:+UseParNewGC 新生代使用并行收集器，老年代使用串行
	-XX:+UseParallelGC 新生代使用并行，老年代串行

	ParNew 新生代 并行收集器，多线程 独占式 -XX:ParallelGCThreads参数指定 并行收集器的线程数量(3+[5*CPU_COUNT/8])
	-XX:+UseParNewGC:新生代使用并行收集器 老年代使用串行收集器 Serial old
	-XX:+UseConcMarkSweepGC:新生代使用并行收集器 老年代使用CMS

	Parallel 新生代 并行收集器 多线程 独占 关注吞吐量 支持自适应 -XX:+UseAdapticeSizePolicy 
	-XX:+UseParallelGC:新生代使用并行收集器 老年代使用串行收集器 Serial old
	-XX:+UseParallelOldGC：新生代和老年代都使用并行回收收集器

	ParallelOld 老年代并行回收收集器，多线程 独占
	-XX:+UseParallelOldGC：新生代和老年代都使用并行回收收集器

	CMS 老年代 关注停顿时间 使用标记清除算法，多线程并行回收 产生内存碎片 垃圾收集完成后，会进行i次独占的碎片整理
	-XX:CMSInitinatingOccupancyFaction 指定老年代使用率达到多少时，进行一次CMS垃圾回收
	-XX:+UseConcMarkSweepGC:新生代使用并行收集器 老年代使用CMS

	G1 逻辑不分代 标记-压缩算法 可以指定长度为M的用户线程，长度为N的垃圾线程，1.7才使用
调优总结

年轻代大小选择
	响应时间优先的应用：尽可能设大，直到接近系统的最低响应时间限制（根据实际情况选择）。在此种情况下，年轻代收集发生的频率也是最小的。同时，减少到达年老代的对象。
	吞吐量优先的应用：尽可能的设置大，可能到达Gbit的程度。因为对响应时间没有要求，垃圾收集可以并行进行，一般适合8CPU以上的应用。

年老代大小选择
	响应时间优先的应用：年老代使用并发收集器，所以其大小需要小心设置，一般要考虑并发会话率和会话持续时间等一些参数。如果堆设置小了，可以会造成内存碎片、高回收频率以及应用暂停而使用传统的标记清除方式；如果堆大了，则需要较长的收集时间。最优化的方案，一般需要参考以下数据获得：
	
	并发垃圾收集信息
	持久代并发收集次数
	传统GC信息
	花在年轻代和年老代回收上的时间比例
	减少年轻代和年老代花费的时间，一般会提高应用的效率

吞吐量优先的应用：一般吞吐量优先的应用都有一个很大的年轻代和一个较小的年老代。原因是，这样可以尽可能回收掉大部分短期对象，减少中期的对象，而年老代尽存放长期存活对象。

较小堆引起的碎片问题

	因为年老代的并发收集器使用标记、清除算法，所以不会对堆进行压缩。当收集器回收时，他会把相邻的空间进行合并，这样可以分配给较大的对象。但是，当堆空间较小时，运行一段时间以后，就会出现“碎片”，如果并发收集器找不到足够的空间，那么并发收集器将会停止，然后使用传统的标记、清除方式进行回收。如果出现“碎片”，可能需要进行如下配置：
	-XX:+UseCMSCompactAtFullCollection：使用并发收集器时，开启对年老代的压缩。
	-XX:CMSFullGCsBeforeCompaction=0：上面配置开启的情况下，这里设置多少次Full GC后，对年老代进行压缩

我在tomcat中的jvm连接数，和tomcat优化的使用如下：



1、 tomcat7安装目录\bin\catalina.bat   (linux修改的是catalina.sh文件)

添加如下语句：

JAVA_OPTS=-Djava.awt.headless=true -Dfile.encoding=UTF-8 -server -Xms1024m -Xmx1024m -Xss1m -XX:NewSize=256m -XX:MaxNewSize=512m -XX:PermSize=256M  -XX:MaxPermSize=512m 

-XX:+DisableExplicitGC

2、查看tomcat的JVM内存

tomcat7中默认没有用户的，我们首先要添加用户有：

修改tomcat7安装目录下\conf\tomcat-users.xml







password是可以自由定义的。



3、检查webapps下是否有Manager目录，一般发布时我们都把这个目录删除了，现在看来删除早了，在调试期要保留啊！



4、访问地址：

http://localhost:8080/manager/status

查看内存配置情况，经测试-Xms512m -Xmx512m与-Xms1024m -Xmx1024m内存使用情况不一样，使用1024的时候有一项内存使用99%。所以看来这个设置多少与实际机器有关，需要Manager进行查看后确定。



5、在启动Tomcat中发现，有同志发布程序时把我们在TOMCAT7中引用的外部JAR包重复发布到LIB目录下了，我们以后在发布时要检查LIB下是不是包括

el-api.jar jsp-api servlet-api,特别注意的是最后一个servlet-api，我发现两个项目都把它拷贝到了LIB目录下！！被我删除了。



6、使用TOMAT的连接池：

  executor="tomcatThreadPool"

protocol="org.apache.coyote.http11.Http11NioProtocol"

redirectPort="8443"

  connectionTimeout="30000" 

  enableLookups="false" 

  keepAliveTimeout="15000" 

  URIEncoding="UTF-8"

  maxHttpHeaderSize="32768"

  acceptCount="200"/>



说明：

maxThreads：最大线程数 300

minSpareThreads：初始化建立的线程数 50

maxThreads：一旦线程超过这个值，Tomcat就会关闭不再需要的线程

maxIdleTime：为最大空闲时间、单位为毫秒。



executor为线程池的名字，对应Executor 中的name属性；Connector 标签中不再有maxThreads的设置。



如果tomcat不使用线程池则基本配置如下：

  protocol="HTTP/1.1"   

  redirectPort="8443"   

  connectionTimeout="30000"   

  keepAliveTimeout="15000"  

  enableLookups="false"  

  URIEncoding="UTF-8"  

  maxHttpHeaderSize="32768"  

  maxThreads="300"  

  acceptCount="200"  

/>  

修改Tomcat的/conf目录下面的server.xml文件，针对端口为8080的连接器添加如下参数：


    1. connectionTimeout：连接失效时间，单位为毫秒、默认为60s、这里设置为30s，如果用户请求在30s内未能进入请求队列，视为本次连接失败。

    2. keepAliveTimeout：连接的存活时间，默认和connectionTimeout一致，这里可以设为15s、这意味着15s之后本次连接关闭. 如果页面需要加载大量图片、js等静态资源，需要将参数适当调大一点、以免多次创建TCP连接。

     3. enableLookups：是否对连接到服务器的远程机器查询其DNS主机名，一般情况下这并不必要，因此设为false即可。

     4. URIEncoding：设置URL参数的编码格式为UTF-8编码，默认为ISO-8859-1编码。

     5. maxHttpHeaderSize：设置HTTP请求、响应的头部内容大小，默认为8192字节(8k)，此处设置为32768字节(32k)、和Nginx的设置保持一致。

     6. maxThreads：最大线程数、用于处理用户请求的线程数目，默认为200、此处设置为300

     7. acceptCount：用户请求等候队列的大小，默认为100、此处设置为200

Linux系统默认一个进程能够创建的最大线程数为1024、因此对高并发应用需要进行Linux内核调优，至此文件server.xml修改后的内容如下所示：


再次登录查看状态，

http://localhost:8080/manager/status

用户名、密码就是上边配置的。根据cpu、内存的大小来配置。

参考：

http://blog.sina.com.cn/s/blog_3f12afd00100zpvf.html



tomcat7 正式环境的优化

http://energykey.iteye.com/blog/2072797

tomcat内存配置优化

http://blog.csdn.net/kefeng824/article/details/31742423

 CentOS 6.5 下的tomcat优化

http://www.cnblogs.com/littlehb/archive/2013/04/02/2994785.html

JVM（Java虚拟机）优化大全和案例实战--(重点推荐)

http://blog.csdn.net/kthq/article/details/8618052

